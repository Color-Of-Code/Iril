%{
using System;
using System.Collections.Generic;
using System.IO;
using System.Numerics;
using System.Text;
using System.Linq;

using Iril.Types;

#pragma warning disable 219,414

namespace Iril.IR
{
	public partial class Parser
	{
%}

%token INTEGER HEX_INTEGER FLOAT_LITERAL STRING TRUE FALSE UNDEF VOID NULL LABEL X
%token SOURCE_FILENAME TARGET DATALAYOUT TRIPLE
%token GLOBAL_SYMBOL LOCAL_SYMBOL META_SYMBOL META_SYMBOL_DEF SYMBOL DISTINCT METADATA CONSTANT_BYTES SECTION
%token TYPE HALF FLOAT DOUBLE X86_FP80 INTEGER_TYPE ZEROINITIALIZER OPAQUE
%token DEFINE DECLARE UNNAMED_ADDR LOCAL_UNNAMED_ADDR NOALIAS ELLIPSIS GLOBAL
%token CONSTANT PRIVATE INTERNAL EXTERNAL LINKONCE LINKONCE_ODR WEAK WEAK_ODR APPENDING COMMON FASTCC SIGNEXT ZEROEXT VOLATILE RETURNED
%token DEREFERENCEABLE AVAILABLE_EXTERNALLY PERSONALITY SRET CLEANUP EXTERNALLY_INITIALIZED
%token NONNULL NOCAPTURE WRITEONLY READONLY READNONE HIDDEN BYVAL
%token ATTRIBUTE_GROUP_REF ATTRIBUTES NORECURSE NOUNWIND UNWIND SPECULATABLE SSP UWTABLE ARGMEMONLY
%token SEQ_CST DSO_LOCAL DSO_PREEMPTABLE
%token RET BR SWITCH INDIRECTBR INVOKE RESUME CATCHSWITCH CATCHRET CLEANUPRET UNREACHABLE
%token FNEG
%token ADD NUW NSW FADD SUB FSUB MUL FMUL UDIV SDIV FDIV UREM SREM FREM
%token SHL LSHR EXACT ASHR
%token AND OR XOR
%token EXTRACTELEMENT INSERTELEMENT SHUFFLEVECTOR
%token EXTRACTVALUE INSERTVALUE
%token ALLOCA LOAD STORE FENCE CMPXCHG ATOMICRMW GETELEMENTPTR ALIGN INBOUNDS INRANGE ADDRSPACE
%token TRUNC ZEXT SEXT FPTRUNC FPEXT TO
%token FPTOUI FPTOSI UITOFP SITOFP PTRTOINT INTTOPTR BITCAST ADDRSPACECAST
%token ICMP EQ NE UGT UGE ULT ULE SGT SGE SLT SLE
%token FCMP OEQ OGT OGE OLT OLE ONE ORD UEQ UNE UNO
%token FAST
%token PHI SELECT CALL TAIL VA_ARG ASM SIDEEFFECT
%token LANDINGPAD CATCH CATCHPAD CLEANUPPAD
%token NOUNDEF IMMARG
%token ATOMIC MONOTONIC

%start module

%%

module
	: module_parts
	;
	
module_parts
    : module_part
    | module_parts module_part
    ;
    
module_part
    : SOURCE_FILENAME '=' STRING
    {
        module.SourceFilename = (string)$3;
    }
    | TARGET DATALAYOUT '=' STRING
    {
        module.TargetDatalayout = (string)$4;
    }
    | TARGET TRIPLE '=' STRING
    {
        module.TargetTriple = (string)$4;
    }
    | LOCAL_SYMBOL '=' TYPE literal_structure
    {
        module.IdentifiedStructures[(Symbol)$1] = (StructureType)$4;
    }
    | LOCAL_SYMBOL '=' TYPE OPAQUE
    {
        module.IdentifiedStructures[(Symbol)$1] = OpaqueStructureType.Opaque;
    }
    | function_definition
    {
        var f = (FunctionDefinition)$1;
        module.FunctionDefinitions[f.Symbol] = f;
    }
    | function_declaration
    {
        var f = (FunctionDeclaration)$1;
        module.FunctionDeclarations[f.Symbol] = f;
    }
    | global_variable
    {
        var g = (GlobalVariable)$1;
        module.AddGlobalVariable(g);
    }
    | ATTRIBUTES ATTRIBUTE_GROUP_REF '=' '{' attributes '}'
    | META_SYMBOL_DEF '=' '!' '{' '}'
    {
        module.Metadata[(Symbol)$1] = new List<object> (0);
    }
    | META_SYMBOL_DEF '=' '!' '{' metadata '}'
    {
        module.Metadata[(Symbol)$1] = $5;
    }
    | META_SYMBOL_DEF '=' META_SYMBOL '(' metadata_args ')'
    {
        var m = SymsAdd ($5, Symbol.Intern("_f"), $3);
        module.Metadata[(Symbol)$1] = m;
    }
    | META_SYMBOL_DEF '=' DISTINCT '!' '{' metadata '}'
    {
        module.Metadata[(Symbol)$1] = $6;
    }
    | META_SYMBOL_DEF '=' DISTINCT META_SYMBOL '(' metadata_args ')'
    {
        var m = SymsAdd ($6, Symbol.Intern("_f"), $4);
        module.Metadata[(Symbol)$1] = m;
    }
    ;
    
global_variable
    : GLOBAL_SYMBOL '=' linkage global_kind type value
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, (Value)$6, isPrivate: false, isExternal: false, isConstant: (bool)$4);
    }
    | GLOBAL_SYMBOL '=' linkage visibility_style global_kind type
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, null, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$3);
    }
    | GLOBAL_SYMBOL '=' linkage global_kind type value ',' SECTION STRING
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, (Value)$6, isPrivate: false, isExternal: false, isConstant: (bool)$4);
    }
    | GLOBAL_SYMBOL '=' linkage function_addr global_kind type value ',' SECTION STRING
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: false, isExternal: false, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' linkage function_addr global_kind type value ',' SECTION STRING ',' ALIGN INTEGER
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: false, isExternal: false, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' global_kind type value ',' ALIGN INTEGER metadata_kvs
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$4, (Value)$5, isPrivate: false, isExternal: false, isConstant: (bool)$3);
    }
    | GLOBAL_SYMBOL '=' function_addr global_kind type value ',' ALIGN INTEGER metadata_kvs
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, (Value)$6, isPrivate: false, isExternal: false, isConstant: (bool)$4);
    }
    | GLOBAL_SYMBOL '=' visibility_style function_addr global_kind type value ',' ALIGN INTEGER
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: false, isExternal: false, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' visibility_style global_kind type value ',' ALIGN INTEGER metadata_kvs
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, (Value)$6, isPrivate: false, isExternal: false, isConstant: (bool)$4);
    }
    | GLOBAL_SYMBOL '=' visibility function_addr global_kind type value ',' ALIGN INTEGER
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: (bool)$3, isExternal: false, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' visibility function_addr global_kind type value
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: (bool)$3, isExternal: false, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' visibility function_addr global_kind type value ',' ALIGN INTEGER metadata_kvs
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: (bool)$3, isExternal: false, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' linkage function_addr global_kind type ',' ALIGN INTEGER
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, null, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' linkage function_addr global_kind type value ',' ALIGN INTEGER
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' linkage function_addr global_kind type value ',' ALIGN INTEGER metadata_kvs
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$6, (Value)$7, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$5);
    }
    | GLOBAL_SYMBOL '=' linkage global_kind type value ',' ALIGN INTEGER
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, (Value)$6, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$4);
    }
    | GLOBAL_SYMBOL '=' linkage global_kind type value ',' ALIGN INTEGER metadata_kvs
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, (Value)$6, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$4);
    }
    | GLOBAL_SYMBOL '=' linkage global_kind type ',' ALIGN INTEGER
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, null, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$4);
    }
    | GLOBAL_SYMBOL '=' linkage global_kind type
    {
        $$ = new GlobalVariable ((GlobalSymbol)$1, (LType)$5, null, isPrivate: false, isExternal: (bool)$3, isConstant: (bool)$4);
    }
    ;
    
global_kind
    : GLOBAL   { $$ = false; }
    | CONSTANT { $$ = true; }
    ;
    
linkage
    : EXTERNAL             { $$ = true; }
    | AVAILABLE_EXTERNALLY { $$ = true; }
    | INTERNAL             { $$ = false; }
    | LINKONCE             { $$ = true; }
    | LINKONCE_ODR         { $$ = true; }
    | WEAK                 { $$ = true; }
    | WEAK_ODR             { $$ = true; }
    | APPENDING            { $$ = true; }
    | COMMON               { $$ = false; }
    ;
    
visibility
    : PRIVATE { $$ = true; }
    ;

visibility_style
    : HIDDEN { $$ = true; }
    ;
    
metadata_args
    : metadata_arg
    {
        var t = (Tuple<object, object>)$1;
        $$ = NewSyms (t.Item1, t.Item2);
    }
    | metadata_args ',' metadata_arg
    {
        var t = (Tuple<object, object>)$3;
        $$ = SymsAdd ($1, t.Item1, t.Item2);
    }
    ;
    
metadata_arg
    : SYMBOL ':' metadata_arg_expr { $$ = Tuple.Create ($1, $3); }
    | TYPE ':' metadata_arg_expr   { $$ = Tuple.Create ($1, $3); }
    | ALIGN ':' constant           { $$ = Tuple.Create ($1, $3); }
    | SYMBOL ':' META_SYMBOL '(' metadata_value_args ')'
    {
        $$ = Tuple.Create ($1, $3);
    }
    | SYMBOL ':' META_SYMBOL '(' ')'
    {
        $$ = Tuple.Create ($1, $3);
    }
    ;
   
metadata_arg_expr
    : metadata_arg_or_expr
    ;
    
metadata_arg_or_expr
    : metadata_arg_and_expr
    | metadata_arg_or_expr '|' metadata_arg_and_expr
    ;
    
metadata_arg_and_expr
    : metadata_arg_primary
    ;

metadata_arg_primary
    : SYMBOL
    | META_SYMBOL
    | STRING
    | constant
    | typed_constant
    | NULL
    ;
    
metadata_kvs
    : META_SYMBOL META_SYMBOL
    {
        $$ = NewSyms ($1, (MetaSymbol)$2);
    }
    | metadata_kvs META_SYMBOL META_SYMBOL
    {
        $$ = SymsAdd ($1, $2, (MetaSymbol)$3);
    }
    ;
    
metadata
    : metadatum
    {
        $$ = NewList ($1);
    }
    | metadata META_SYMBOL
    {
        $$ = ListAdd ($1, $2);
    }
    | metadata ',' typed_value
    {
        $$ = ListAdd ($1, $3);
    }
    | metadata ',' META_SYMBOL
    {
        $$ = ListAdd ($1, $3);
    }
    | metadata ',' NULL
    {
        $$ = ListAdd ($1, $3);
    }
    ;
    
metadatum
    : typed_value
    | META_SYMBOL
    | NULL
    ;
    
attributes
    : attribute
    | attributes attribute
    ;
    
attribute
    : NORECURSE
    | NOUNWIND
    | READNONE
    | SPECULATABLE
    | SSP
    | UWTABLE
    | ARGMEMONLY
    | STRING '=' STRING
    | STRING
    | SYMBOL
    | READONLY
    | WRITEONLY
    | SYMBOL '(' metadata_value_args ')'
    ;
    
literal_structure
    : '{' '}'
    {
        $$ = LiteralStructureType.Empty;
    }
    | '{' type_list '}'
    {
        $$ = new LiteralStructureType (false, (List<LType>)$2);
    }
    | '<' '{' type_list '}' '>'
    {
        $$ = new PackedStructureType ((List<LType>)$3);
    }
    ;
    
type_list
    : type
    {
        $$ = NewList ((LType)$1);
    }
    | type_list ',' type
    {
        $$ = ListAdd ($1, (LType)$3);
    }
    ;
    
return_type
    : type
    | VOID { $$ = VoidType.Void; }
    ;
    
type
    : literal_structure
    | INTEGER_TYPE
    | HALF         { $$ = FloatType.Half; }
    | FLOAT        { $$ = FloatType.Float; }
    | DOUBLE       { $$ = FloatType.Double; }
    | X86_FP80     { $$ = FloatType.X86_FP80; }
    | return_type '(' ')'
    {
        $$ = new FunctionType ((LType)$1, Enumerable.Empty<LType>());
    }
    | return_type '(' function_type_args ')'
    {
        $$ = new FunctionType ((LType)$1, (List<LType>)$3);
    }
    | type optional_addrspace '*'
    {
        $$ = new PointerType ((LType)$1, 0);
    }
    | type optional_addrspace '*' ALIGN INTEGER
    {
        $$ = new PointerType ((LType)$1, 0);
    }
    | LOCAL_SYMBOL
    {
        $$ = new NamedType ((Symbol)$1);
    }
    | '<' INTEGER X type '>'
    {
        $$ = new VectorType ((int)(BigInteger)$2, (LType)$4);
    }
    | '[' INTEGER X type ']'
    {
        $$ = new ArrayType ((long)(BigInteger)$2, (LType)$4);
    }
    ;

addrspace
    : ADDRSPACE '(' INTEGER ')'
    ;
    
optional_addrspace
    : /* empty */
    | ADDRSPACE '(' INTEGER ')'
    ;
    
function_type_args
    : function_type_arg
    {
        $$ = NewList ((LType)$1);
    }
    | function_type_args ',' function_type_arg
    {
        $$ = ListAdd ($1, (LType)$3);
    }
    ;
    
function_type_arg
    : type
    | ELLIPSIS
    {
        $$ = VarArgsType.VarArgs;
    }
    ;
    
function_definition
    : define_header GLOBAL_SYMBOL parameters define_tail '{' blocks '}'
    {
        var h = (Tuple<object, object>)$1;
        $$ = new FunctionDefinition ((LType)h.Item2, (GlobalSymbol)$2, (IEnumerable<Parameter>)$3, (List<Block>)$6, isExternal: (bool)h.Item1);
    }
    | define_header GLOBAL_SYMBOL parameters define_tail metadata_kvs '{' blocks '}'
    {
        var h = (Tuple<object, object>)$1;
        $$ = new FunctionDefinition ((LType)h.Item2, (GlobalSymbol)$2, (IEnumerable<Parameter>)$3, (List<Block>)$7, isExternal: (bool)h.Item1, (SymbolTable<MetaSymbol>)$5);
    }
    ;
    
define_tail
    : function_addr
    | function_addr attribute_group_refs
    | function_addr attribute_group_refs ALIGN INTEGER
    | function_addr attribute_group_refs personality_function
    | function_addr attribute_group_refs ALIGN INTEGER personality_function
    | function_addr attribute_group_refs SECTION STRING
    | attribute_group_refs
    | attribute_group_refs ALIGN INTEGER
    | attribute_group_refs personality_function
    | attribute_group_refs ALIGN INTEGER personality_function
    | attribute_group_refs SECTION STRING
    ;
    
define_header
    : DEFINE return_type
    {
        $$ = Tuple.Create ((object)true, $2);
    }
    | DEFINE parameter_attribute return_type
    {
        $$ = Tuple.Create ((object)true, $3);
    }
    | DEFINE define_header_attributes return_type
    {
        $$ = Tuple.Create ($2, $3);
    }
    | DEFINE define_header_attributes visibility_style return_type
    {
        $$ = Tuple.Create ($2, $4);
    }
    | DEFINE define_header_attributes parameter_attributes return_type
    {
        $$ = Tuple.Create ($2, $4);
    }
    ;
    
define_header_attributes
    : NOALIAS
    {
        $$ = true;
    }
    | runtime_preemption_specifier
    {
        $$ = true;
    }
    | calling_convention
    {
        $$ = true;
    }
    | linkage
    | linkage runtime_preemption_specifier
    | linkage runtime_preemption_specifier calling_convention
    | linkage calling_convention
    ;
    
personality_function
    : PERSONALITY typed_value
    {
        $$ = $2;
    }
    ;

declare_head
    : DECLARE
    | DECLARE metadata_kvs
    ;
    
function_declaration
    : declare_head return_type GLOBAL_SYMBOL parameters
    {
        $$ = new FunctionDeclaration ((LType)$2, (GlobalSymbol)$3, (IEnumerable<Parameter>)$4);
    }
    | declare_head return_type GLOBAL_SYMBOL parameters declare_tail
    {
        $$ = new FunctionDeclaration ((LType)$2, (GlobalSymbol)$3, (IEnumerable<Parameter>)$4);
    }
    | declare_head NOALIAS return_type GLOBAL_SYMBOL parameters declare_tail
    {
        $$ = new FunctionDeclaration ((LType)$3, (GlobalSymbol)$4, (IEnumerable<Parameter>)$5);
    }
    | declare_head parameter_attributes return_type GLOBAL_SYMBOL parameters declare_tail
    {
        $$ = new FunctionDeclaration ((LType)$3, (GlobalSymbol)$4, (IEnumerable<Parameter>)$5);
    }
    | declare_head NOALIAS parameter_attributes return_type GLOBAL_SYMBOL parameters declare_tail
    {
        $$ = new FunctionDeclaration ((LType)$4, (GlobalSymbol)$5, (IEnumerable<Parameter>)$6);
    }
    ;
    
declare_tail
    : function_addr
    | function_addr attribute_group_refs
    | attribute_group_refs
    ;
    
parameters
    : '(' parameter_list ')' { $$ = $2; }
    | '(' ')'                { $$ = Enumerable.Empty<Parameter> (); }
    ;
    
parameter_list
    : parameter
    {
        $$ = NewList ((Parameter)$1);
    }
    | parameter_list ',' parameter
    {
        $$ = ListAdd ($1, (Parameter)$3);
    }
    ;
    
parameter
    : type
    {
        $$ = new Parameter (LocalSymbol.None, (LType)$1);
    }
    | type LOCAL_SYMBOL
    {
        $$ = new Parameter ((LocalSymbol)$2, (LType)$1);
    }
    | type parameter_attributes
    {
        $$ = new Parameter (LocalSymbol.None, (LType)$1);
    }
    | type parameter_attributes LOCAL_SYMBOL
    {
        $$ = new Parameter ((LocalSymbol)$3, (LType)$1);
    }
    | METADATA
    {
        $$ = new Parameter (LocalSymbol.None, IntegerType.I32);
    }
    | ELLIPSIS
    {
        $$ = new Parameter (LocalSymbol.None, VarArgsType.VarArgs);
    }
    ;
    
parameter_attributes
    : parameter_attribute
    | parameter_attributes parameter_attribute
    {
        $$ = ((ParameterAttributes)$1) | ((ParameterAttributes)$2);
    }
    ;
    
parameter_attribute
    : NONNULL   { $$ = ParameterAttributes.NonNull; }
    | NOCAPTURE { $$ = ParameterAttributes.NoCapture; }
    | NOUNDEF   { $$ = ParameterAttributes.NoUndef; }
    | IMMARG    { $$ = ParameterAttributes.ImmediateArgument; }
    | READONLY  { $$ = ParameterAttributes.ReadOnly; }
    | WRITEONLY { $$ = ParameterAttributes.WriteOnly; }
    | READNONE  { $$ = ParameterAttributes.ReadNone; }
    | SIGNEXT   { $$ = ParameterAttributes.SignExtend; }
    | ZEROEXT   { $$ = ParameterAttributes.ZeroExtend; }
    | RETURNED  { $$ = ParameterAttributes.Returned; }
    | SRET      { $$ = ParameterAttributes.StructureReturn; }
    | SRET '(' type ')' { $$ = ParameterAttributes.StructureReturn; }
    | NOALIAS   { $$ = ParameterAttributes.NoAlias; }
    | BYVAL     { $$ = ParameterAttributes.Byval; }
    | BYVAL '(' type ')' { $$ = ParameterAttributes.Byval; }
    | DEREFERENCEABLE '(' INTEGER ')'
    {
        $$ = ParameterAttributes.Dereferenceable;
    }
    | ALIGN INTEGER
    {
        $$ = ParameterAttributes.Align8;
    }
    ;
    
function_addr_type
    : UNNAMED_ADDR
    | LOCAL_UNNAMED_ADDR
    ;
    
function_addr
    : function_addr_type optional_addrspace
    | function_addr_type optional_addrspace EXTERNALLY_INITIALIZED
    | optional_addrspace EXTERNALLY_INITIALIZED
    | addrspace
    ;

runtime_preemption_specifier
    : DSO_LOCAL
    | DSO_PREEMPTABLE
    ;
    
attribute_group_refs
    : attribute_group_ref
    | attribute_group_refs attribute_group_ref
    ;
    
attribute_group_ref
    : ATTRIBUTE_GROUP_REF
    ;
    
icmp_condition
    : EQ  { $$ = IcmpCondition.Equal; }
    | NE  { $$ = IcmpCondition.NotEqual; }
    | UGT { $$ = IcmpCondition.UnsignedGreaterThan; }
    | UGE { $$ = IcmpCondition.UnsignedGreaterThanOrEqual; }
    | ULT { $$ = IcmpCondition.UnsignedLessThan; }
    | ULE { $$ = IcmpCondition.UnsignedLessThanOrEqual; }
    | SGT { $$ = IcmpCondition.SignedGreaterThan; }
    | SGE { $$ = IcmpCondition.SignedGreaterThanOrEqual; }
    | SLT { $$ = IcmpCondition.SignedLessThan; }
    | SLE { $$ = IcmpCondition.SignedLessThanOrEqual; }
    ;
    
fcmp_condition
    : TRUE   { $$ = FcmpCondition.True; }
    | FALSE  { $$ = FcmpCondition.False; }
    | ORD    { $$ = FcmpCondition.Ordered; }
    | OEQ    { $$ = FcmpCondition.OrderedEqual; }
    | ONE    { $$ = FcmpCondition.OrderedNotEqual; }
    | OGT    { $$ = FcmpCondition.OrderedGreaterThan; }
    | OGE    { $$ = FcmpCondition.OrderedGreaterThanOrEqual; }
    | OLT    { $$ = FcmpCondition.OrderedLessThan; }
    | OLE    { $$ = FcmpCondition.OrderedLessThanOrEqual; }
    | UNO    { $$ = FcmpCondition.Unordered; }
    | UEQ    { $$ = FcmpCondition.UnorderedEqual; }
    | UNE    { $$ = FcmpCondition.UnorderedNotEqual; }
    | UGT    { $$ = FcmpCondition.UnorderedGreaterThan; }
    | UGE    { $$ = FcmpCondition.UnorderedGreaterThanOrEqual; }
    | ULT    { $$ = FcmpCondition.UnorderedLessThan; }
    | ULE    { $$ = FcmpCondition.UnorderedLessThanOrEqual; }
    ;
    
global_value
    : GLOBAL_SYMBOL { $$ = new GlobalValue ((GlobalSymbol)$1); }
    ;
    
value
    : global_value
    | nonglobal_value
    ;
    
nonglobal_value
    : constant 
    | LOCAL_SYMBOL  { $$ = new LocalValue ((LocalSymbol)$1); }
    | INTTOPTR '(' typed_value TO type ')'
    {
        $$ = new IntToPointerValue ((TypedValue)$3, (LType)$5);
    }
    | GETELEMENTPTR INBOUNDS '(' type ',' typed_value ',' element_indices ')'
    {
        $$ = new GetElementPointerValue ((LType)$4, (TypedValue)$6, (List<TypedValue>)$8);
    }
    | GETELEMENTPTR '(' type ',' typed_value ',' element_indices ')'
    {
        $$ = new GetElementPointerValue ((LType)$3, (TypedValue)$5, (List<TypedValue>)$7);
    }
    | BITCAST '(' typed_value TO type ')'
    {
        $$ = new BitcastValue ((TypedValue)$3, (LType)$5);
    }
    | PTRTOINT '(' typed_value TO type ')'
    {
        $$ = new PtrtointValue ((TypedValue)$3, (LType)$5);
    }
    | '<' typed_values '>'
    {
        $$ = new VectorConstant ((List<TypedValue>)$2);
    }
    | '[' typed_values ']'
    {
        $$ = new ArrayConstant ((List<TypedValue>)$2);
    }
    | '{' typed_values '}'
    {
        $$ = new StructureConstant ((List<TypedValue>)$2);
    }
    | '<' '{' typed_values '}' '>'
    {
        $$ = new StructureConstant ((List<TypedValue>)$3);
    }
    | ADDRSPACECAST '(' typed_value TO type ')'
    {
        $$ = new AddrSpaceCastValue ((TypedValue)$3, (LType)$5);
    }
    ;
    
pointer_value
    : value
    ;

constant
    : NULL            { $$ = NullConstant.Null; }
    | FLOAT_LITERAL   { $$ = new FloatConstant ((double)$1); }
    | INTEGER         { $$ = new IntegerConstant ((BigInteger)$1); }
    | HEX_INTEGER     { $$ = new HexIntegerConstant ((BigInteger)$1); }
    | TRUE            { $$ = BooleanConstant.True; }
    | FALSE           { $$ = BooleanConstant.False; }
    | UNDEF           { $$ = UndefinedConstant.Undefined; }
    | ZEROINITIALIZER { $$ = ZeroConstant.Zero; }
    | CONSTANT_BYTES  { $$ = new BytesConstant ((Symbol)$1); }
    ;
    
label_value
    : LABEL LOCAL_SYMBOL
    {
        $$ = new LabelValue ((LocalSymbol)$2);
    }
    ;
    
typed_value
    : type value
    {
        $$ = new TypedValue ((LType)$1, (Value)$2);
    }
    | VOID
    {
        $$ = new TypedValue (VoidType.Void, VoidValue.Void);
    }
    ;
            
typed_pointer_value
    : type pointer_value
    {
        $$ = new TypedValue ((LType)$1, (Value)$2);
    }
    ;
            
typed_values
    : typed_value
    {
        $$ = NewList ((TypedValue)$1);
    }
    | typed_values ',' typed_value
    {
        $$ = ListAdd ($1, (TypedValue)$3);
    }
    ;

typed_constant
    : type constant
    {
        $$ = new TypedConstant ((LType)$1, (Constant)$2);
    }
    ;

element_index
    : typed_value
    | INRANGE typed_value
    {
        $$ = $2;
    }
    ;
    
element_indices
    : element_index
    {
        $$ = NewList ((TypedValue)$1);
    }
    | element_indices ',' element_index
    {
        $$ = ListAdd ($1, (TypedValue)$3);
    }
    ;
    
index
    : constant
    ;
    
indices
    : index
    {
        $$ = NewList ((Value)$1);
    }
    | indices ',' index
    {
        $$ = ListAdd ($1, (Value)$3);
    }
    ;
    
blocks
    : lblock
    {
        $$ = NewList ((Block)$1);
    }
    | blocks lblock
    {
        $$ = ListAdd ($1, (Block)$2);
    }
    ;

 lblock
    : INTEGER ':' block
    {
        $$ = $3;
    }
    | block
    {
        $$ = $1;
    }
    ;

block
    : assignments terminator_assignment
    {
        $$ = new Block (LocalSymbol.None, (List<Assignment>)$1, (Assignment)$2);
    }
    | assignments terminator_assignment metadata_kvs
    {
        $$ = new Block (LocalSymbol.None, (List<Assignment>)$1, (Assignment)$2);
    }
    | terminator_assignment
    {
        $$ = new Block (LocalSymbol.None, Enumerable.Empty<Assignment>(), (Assignment)$1);
    }
    | terminator_assignment metadata_kvs
    {
        $$ = new Block (LocalSymbol.None, Enumerable.Empty<Assignment>(), (Assignment)$1);
    }
    ;
    
assignments
    : assignment
    {
        $$ = NewList ((Assignment)$1);
    }
    | assignments assignment
    {
        $$ = ListAdd ($1, (Assignment)$2);
    }
    ;
    
assignment
    : instruction
    {
        $$ = new Assignment ((Instruction)$1);
    }
    | instruction metadata_kvs
    {
        $$ = new Assignment ((Instruction)$1, (SymbolTable<MetaSymbol>)$2);
    }
    | LOCAL_SYMBOL '=' instruction
    {
        $$ = new Assignment ((LocalSymbol)$1, (Instruction)$3);
    }
    | LOCAL_SYMBOL '=' instruction metadata_kvs
    {
        $$ = new Assignment ((LocalSymbol)$1, (Instruction)$3, (SymbolTable<MetaSymbol>)$4);
    }
    ;
    
function_pointer
    : value
    ;
    
function_args
    : '(' function_arg_list ')' { $$ = $2; }
    | '(' ')'                   { $$ = Enumerable.Empty<Argument> (); }
    ;
    
function_arg_list
    : function_arg
    {
        $$ = NewList ((Argument)$1);
    }
    | function_arg_list ',' function_arg
    {
        $$ = ListAdd ($1, (Argument)$3);
    }
    ;
    
function_arg
    : type value
    {
        $$ = new Argument ((LType)$1, (Value)$2, (ParameterAttributes)0);
    }
    | type parameter_attributes value
    {
        $$ = new Argument ((LType)$1, (Value)$3, ParameterAttributes.NonNull);
    }
    | METADATA type metadata_value
    {
        $$ = new Argument ((LType)$2, (Value)$3, (ParameterAttributes)0);
    }
    | METADATA META_SYMBOL
    {
        $$ = new Argument (IntegerType.I32, new MetaValue ((MetaSymbol)$2), (ParameterAttributes)0);
    }
    | METADATA META_SYMBOL '(' ')'
    {
        $$ = new Argument (IntegerType.I32, new MetaValue ((MetaSymbol)$2), (ParameterAttributes)0);
    }
    | METADATA META_SYMBOL '(' metadata_value_args ')'
    {
        $$ = new Argument (IntegerType.I32, new MetaValue ((MetaSymbol)$2), (ParameterAttributes)0);
    }
    ;
    
metadata_value
    : constant 
    | GLOBAL_SYMBOL
    {
        $$ = new GlobalValue ((GlobalSymbol)$1);
    }
    | LOCAL_SYMBOL
    {
        $$ = new LocalValue ((LocalSymbol)$1);
    }
    | SYMBOL
    {
        $$ = new SymbolValue ((Symbol)$1);
    }
    | INTTOPTR '(' typed_value TO type ')'
    {
        $$ = new IntToPointerValue ((TypedValue)$3, (LType)$5);
    }
    | GETELEMENTPTR INBOUNDS '(' type ',' typed_value ',' element_indices ')'
    {
        $$ = new GetElementPointerValue ((LType)$4, (TypedValue)$6, (List<TypedValue>)$8);
    }
    | BITCAST '(' typed_value TO type ')'
    {
        $$ = new BitcastValue ((TypedValue)$3, (LType)$5);
    }
    | PTRTOINT '(' typed_value TO type ')'
    {
        $$ = new PtrtointValue ((TypedValue)$3, (LType)$5);
    }
    ;

metadata_value_args
    : metadata_value_arg
    | metadata_value_args ',' metadata_value_arg
    ;
    
metadata_value_arg
    : constant
    | SYMBOL
    | type LOCAL_SYMBOL
    | type SYMBOL
    | type UNDEF
    ;
    
phi_vals
    : phi_val
    {
        $$ = NewList ((PhiValue)$1);
    }
    | phi_vals ',' phi_val
    {
        $$ = ListAdd ($1, (PhiValue)$3);
    };
    
phi_val
    : '[' value ',' value ']'
    {
        $$ = new PhiValue ((Value)$2, (Value)$4);
    }
    ;
    
switch_cases
    : switch_case
    {
        $$ = NewList ((SwitchCase)$1);
    }
    | switch_cases switch_case
    {
        $$ = ListAdd ($1, (SwitchCase)$2);
    }
    ;
    
switch_case
    : typed_constant ',' label_value
    {
        $$ = new SwitchCase ((TypedConstant)$1, (LabelValue)$3);
    }
    ;
    
wrappings
    : wrapping
    | wrappings wrapping
    ;
    
wrapping
    : NUW
    | NSW
    ;
    
calling_convention
    : FASTCC
    ;
    
atomic_constraint
    : SEQ_CST { $$ = AtomicConstraint.SequentiallyConsistent; }
    ;

inline_assembly
    : ASM SIDEEFFECT STRING ',' STRING
    {
        $$ = new InlineAssemblyValue ((string)$3, (string)$5);
    }
    ;

terminator_assignment
    : terminator_instruction
    {
        $$ = new Assignment (LocalSymbol.None, (Instruction)$1);
    }
    | LOCAL_SYMBOL '=' invoke_instruction
    {
        $$ = new Assignment ((LocalSymbol)$1, (Instruction)$3);
    }
    ;
    
terminator_instruction
    : BR label_value
    {
        $$ = new UnconditionalBrInstruction ((LabelValue)$2);
    }
    | BR INTEGER_TYPE value ',' label_value ',' label_value
    {
        $$ = new ConditionalBrInstruction ((Value)$3, (LabelValue)$5, (LabelValue)$7);
    }
    | RESUME typed_value
    {
        $$ = new ResumeInstruction ((TypedValue)$2);
    }
    | RET typed_value
    {
        $$ = new RetInstruction ((TypedValue)$2);
    }
    | SWITCH typed_value ',' label_value '[' switch_cases ']'
    {
        $$ = new SwitchInstruction ((TypedValue)$2, (LabelValue)$4, (List<SwitchCase>)$6);
    }
    | UNREACHABLE
    {
        $$ = UnreachableInstruction.Unreachable;
    }
    | invoke_instruction
    ;
    
invoke_instruction
    : INVOKE return_type function_pointer function_args TO label_value UNWIND label_value
    {
        $$ = new InvokeInstruction ((LType)$2, (Value)$3, (IEnumerable<Argument>)$4, (LabelValue)$6, (LabelValue)$8);
    }
    | INVOKE parameter_attributes return_type function_pointer function_args TO label_value UNWIND label_value
    {
        $$ = new InvokeInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, (LabelValue)$7, (LabelValue)$9);
    }
    | INVOKE calling_convention return_type function_pointer function_args TO label_value UNWIND label_value
    {
        $$ = new InvokeInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, (LabelValue)$7, (LabelValue)$9);
    }
    | INVOKE calling_convention parameter_attributes return_type function_pointer function_args TO label_value UNWIND label_value
    {
        $$ = new InvokeInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, (LabelValue)$8, (LabelValue)$10);
    }
    ;
    
optional_fast
    : /* empty */
    {
        $$ = false;
    }
    | FAST
    {
        $$ = true;
    }
    ;
    
instruction
    : ADD type value ',' value
    {
        $$ = new AddInstruction ((LType)$2, (Value)$3, (Value)$5, isAtomic: false);
    }
    | ADD wrappings type value ',' value
    {
        $$ = new AddInstruction ((LType)$3, (Value)$4, (Value)$6, isAtomic: false);
    }
    | ATOMICRMW ADD type value ',' type value SEQ_CST ',' ALIGN INTEGER
    {
        $$ = new AddInstruction ((LType)$3, (Value)$4, (Value)$7, isAtomic: true);
    }
    | ALLOCA type ',' ALIGN INTEGER
    {
        $$ = new AllocaInstruction ((LType)$2, (int)(BigInteger)$5, numElements: (TypedValue)null);
    }
    | ALLOCA type ',' typed_value ',' ALIGN INTEGER
    {
        $$ = new AllocaInstruction ((LType)$2, (int)(BigInteger)$7, numElements: (TypedValue)$4);
    }
    | AND type value ',' value
    {
        $$ = new AndInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | ASHR type value ',' value
    {
        $$ = new AshrInstruction ((LType)$2, (Value)$3, (Value)$5, false);
    }
    | ASHR EXACT type value ',' value
    {
        $$ = new AshrInstruction ((LType)$3, (Value)$4, (Value)$6, true);
    }
    | BITCAST typed_value TO type
    {
        $$ = new BitcastInstruction ((TypedValue)$2, (LType)$4);
    }
    | CALL return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$2, (Value)$3, (IEnumerable<Argument>)$4, false);
    }
    | CALL return_type inline_assembly function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$2, (Value)$3, (IEnumerable<Argument>)$4, false);
    }
    | CALL calling_convention return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, false);
    }
    | CALL calling_convention return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, false);
    }
    | CALL calling_convention parameter_attribute return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, false);
    }
    | CALL calling_convention parameter_attribute return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, false);
    }
    | CALL return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$2, (Value)$3, (IEnumerable<Argument>)$4, false);
    }
    | CALL parameter_attribute return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, false);
    }
    | CALL parameter_attribute return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, false);
    }
    | TAIL CALL return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, true);
    }
    | TAIL CALL FAST return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, true);
    }
    | TAIL CALL parameter_attribute return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, true);
    }
    | TAIL CALL parameter_attribute return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, true);
    }
    | TAIL CALL return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, true);
    }
    | TAIL CALL calling_convention return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, true);
    }
    | TAIL CALL calling_convention return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$4, (Value)$5, (IEnumerable<Argument>)$6, true);
    }
    | TAIL CALL calling_convention parameter_attributes return_type function_pointer function_args
    {
        $$ = new CallInstruction ((LType)$5, (Value)$6, (IEnumerable<Argument>)$7, true);
    }
    | TAIL CALL calling_convention parameter_attributes return_type function_pointer function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$5, (Value)$6, (IEnumerable<Argument>)$7, true);
    }
    | TAIL CALL return_type inline_assembly function_args attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (IEnumerable<Argument>)$5, true);
    }
    | EXTRACTELEMENT typed_value ',' typed_value
    {
        $$ = new ExtractElementInstruction ((TypedValue)$2, (TypedValue)$4);
    }
    | EXTRACTVALUE typed_value ',' indices
    {
        $$ = new ExtractValueInstruction ((TypedValue)$2, (List<Value>)$4);
    }
    | FADD optional_fast type value ',' value
    {
        $$ = new FaddInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | FCMP optional_fast fcmp_condition type value ',' value
    {
        $$ = new FcmpInstruction ((FcmpCondition)$3, (LType)$4, (Value)$5, (Value)$7);
    }
    | FDIV optional_fast type value ',' value
    {
        $$ = new FdivInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | FENCE atomic_constraint
    {
        $$ = new FenceInstruction ((AtomicConstraint)$2);
    }
    | FMUL optional_fast type value ',' value
    {
        $$ = new FmulInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | FPEXT typed_value TO type
    {
        $$ = new FpextInstruction ((TypedValue)$2, (LType)$4);
    }
    | FPTOUI typed_value TO type
    {
        $$ = new FptouiInstruction ((TypedValue)$2, (LType)$4);
    }
    | FPTOSI typed_value TO type
    {
        $$ = new FptosiInstruction ((TypedValue)$2, (LType)$4);
    }
    | FPTRUNC typed_value TO type
    {
        $$ = new FptruncInstruction ((TypedValue)$2, (LType)$4);
    }
    | FSUB optional_fast type value ',' value
    {
        $$ = new FsubInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | GETELEMENTPTR type ',' typed_value ',' element_indices
    {
        $$ = new GetElementPointerInstruction ((LType)$2, (TypedValue)$4, (List<TypedValue>)$6);
    }
    | GETELEMENTPTR INBOUNDS type ',' typed_value ',' element_indices
    {
        $$ = new GetElementPointerInstruction ((LType)$3, (TypedValue)$5, (List<TypedValue>)$7);
    }
    | ICMP icmp_condition type value ',' value
    {
        $$ = new IcmpInstruction ((IcmpCondition)$2, (LType)$3, (Value)$4, (Value)$6);
    }
    | INSERTELEMENT typed_value ',' typed_value ',' typed_value
    {
        $$ = new InsertElementInstruction ((TypedValue)$2, (TypedValue)$4, (TypedValue)$6);
    }
    | INSERTVALUE typed_value ',' typed_value ',' indices
    {
        $$ = new InsertValueInstruction ((TypedValue)$2, (TypedValue)$4, (List<Value>)$6);
    }
    | INTTOPTR typed_value TO type
    {
        $$ = new InttoptrInstruction ((TypedValue)$2, (LType)$4);
    }
    | LANDINGPAD type CLEANUP
    {
        $$ = new LandingPadInstruction ((LType)$2);
    }
    | LANDINGPAD type CATCH typed_value
    {
        $$ = new LandingPadInstruction ((LType)$2, (TypedValue)$4);
    }
    | LOAD type ',' typed_pointer_value ',' ALIGN INTEGER
    {
        $$ = new LoadInstruction ((LType)$2, (TypedValue)$4, isVolatile: false, isAtomic: false);
    }
    | LOAD ATOMIC type ',' typed_pointer_value ',' ALIGN INTEGER
    {
        $$ = new LoadInstruction ((LType)$3, (TypedValue)$5, isVolatile: false, isAtomic: true);
    }
    | LOAD VOLATILE type ',' typed_pointer_value ',' ALIGN INTEGER
    {
        $$ = new LoadInstruction ((LType)$3, (TypedValue)$5, isVolatile: true, isAtomic: false);
    }
    | LOAD ATOMIC VOLATILE type ',' typed_pointer_value ',' ALIGN INTEGER
    {
        $$ = new LoadInstruction ((LType)$4, (TypedValue)$6, isVolatile: true, isAtomic: true);
    }
    | LOAD ATOMIC VOLATILE type ',' typed_pointer_value MONOTONIC ',' ALIGN INTEGER
    {
        $$ = new LoadInstruction ((LType)$4, (TypedValue)$6, isVolatile: true, isAtomic: true);
    }
    | LSHR type value ',' value
    {
        $$ = new LshrInstruction ((LType)$2, (Value)$3, (Value)$5, false);
    }
    | LSHR EXACT type value ',' value
    {
        $$ = new LshrInstruction ((LType)$3, (Value)$4, (Value)$6, true);
    }
    | OR type value ',' value
    {
        $$ = new OrInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | MUL type value ',' value
    {
        $$ = new MultiplyInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | MUL wrappings type value ',' value
    {
        $$ = new MultiplyInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | PHI type phi_vals
    {
        $$ = new PhiInstruction ((LType)$2, (List<PhiValue>)$3);
    }
    | PTRTOINT typed_value TO type
    {
        $$ = new PtrtointInstruction ((TypedValue)$2, (LType)$4);
    }
    | SDIV type value ',' value
    {
        $$ = new SdivInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | SDIV EXACT type value ',' value
    {
        $$ = new SdivInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | SELECT optional_fast type value ',' typed_value ',' typed_value
    {
        $$ = new SelectInstruction ((LType)$3, (Value)$4, (TypedValue)$6, (TypedValue)$8);
    }
    | SEXT typed_value TO type
    {
        $$ = new SextInstruction ((TypedValue)$2, (LType)$4);
    }
    | SHL type value ',' value
    {
        $$ = new ShlInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | SHL wrappings type value ',' value
    {
        $$ = new ShlInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | SHUFFLEVECTOR typed_value ',' typed_value ',' typed_value
    {
        $$ = new ShuffleVectorInstruction ((TypedValue)$2, (TypedValue)$4, (TypedValue)$6);
    }
    | SITOFP typed_value TO type
    {
        $$ = new SitofpInstruction ((TypedValue)$2, (LType)$4);
    }
    | SREM type value ',' value
    {
        $$ = new SremInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | STORE typed_value ',' typed_pointer_value ',' ALIGN INTEGER
    {
        $$ = new StoreInstruction (value: (TypedValue)$2, pointer: (TypedValue)$4, isVolatile: false);
    }
    | STORE VOLATILE typed_value ',' typed_pointer_value ',' ALIGN INTEGER
    {
        $$ = new StoreInstruction (value: (TypedValue)$3, pointer: (TypedValue)$5, isVolatile: true);
    }
    | SUB type value ',' value
    {
        $$ = new SubInstruction ((LType)$2, (Value)$3, (Value)$5, isAtomic: false);
    }
    | SUB wrappings type value ',' value
    {
        $$ = new SubInstruction ((LType)$3, (Value)$4, (Value)$6, isAtomic: false);
    }
    | ATOMICRMW SUB type value ',' type value SEQ_CST ',' ALIGN INTEGER
    {
        $$ = new SubInstruction ((LType)$3, (Value)$4, (Value)$7, isAtomic: true);
    }
    | TRUNC typed_value TO type
    {
        $$ = new TruncInstruction ((TypedValue)$2, (LType)$4);
    }
    | UDIV type value ',' value
    {
        $$ = new UdivInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | UITOFP typed_value TO type
    {
        $$ = new UitofpInstruction ((TypedValue)$2, (LType)$4);
    }
    | UREM type value ',' value
    {
        $$ = new UremInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | XOR type value ',' value
    {
        $$ = new XorInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | ZEXT typed_value TO type
    {
        $$ = new ZextInstruction ((TypedValue)$2, (LType)$4);
    }
    ;
    
%%

}

