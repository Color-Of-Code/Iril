%{
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

using Repil.Types;

#pragma warning disable 219,414

namespace Repil.IR
{
	public partial class Parser
	{
%}

%token INTEGER STRING TRUE FALSE NULL LABEL
%token SOURCE_FILENAME TARGET DATALAYOUT TRIPLE
%token GLOBAL_SYMBOL LOCAL_SYMBOL
%token TYPE HALF FLOAT DOUBLE I1 I8 I16 I32 I64
%token DEFINE UNNAMED_ADDR LOCAL_UNNAMED_ADDR
%token ATTRIBUTE_GROUP_REF
%token RET BR SWITCH INDIRECTBR INVOKE RESUME CATCHSWITCH CATCHRET CLEANUPRET UNREACHABLE
%token FNEG
%token ADD FADD SUB FSUB MUL FMUL UDIV SDIV FDIV UREM SREM FREM
%token SHL LSHR ASHR
%token AND OR XOR
%token EXTRACTELEMENT INSERTELEMENT SHUFFLEVECTOR
%token EXTRACTVALUE INSERTVALUE
%token ALLOCA LOAD STORE FENCE CMPXCHG ATOMICRMW GETELEMENTPTR
%token TRUNC ZEXT SEXT FPTRUNC FPEXT
%token FPTOUI FPTOSI UITOFP SITOFP PTRTOINT INTTOPTR BITCAST ADDRSPACECAST
%token ICMP EQ NE UGT UGE ULT ULE SGT SGE SLT SLE
%token FCMP OEQ OGT OGE OLT OLE ONE ORD UEQ UNE UNO
%token PHI SELECT CALL VA_ARG
%token LANDINGPAD CATCHPAD CLEANUPPAD

%start module
%%

module
	: module_parts
	;
	
module_parts
    : module_part
    | module_parts module_part
    ;
    
module_part
    : SOURCE_FILENAME '=' STRING
    {
        module.SourceFilename = (string)$3;
    }
    | TARGET DATALAYOUT '=' STRING
    {
        module.TargetDatalayout = (string)$4;
    }
    | TARGET TRIPLE '=' STRING
    {
        module.TargetTriple = (string)$4;
    }
    | LOCAL_SYMBOL '=' TYPE literal_structure
    {
        module.IdentifiedStructures[(Symbol)$1] = (StructureType)$4;
    }
    | function_definition
    ;
    
literal_structure
    : '{' type_list '}'
    {
        var s = new LiteralStructureType ();
        $$ = s;
    }
    ;
    
type_list
    : type
    {
        $$ = NewList ((LType)$1);
    }
    | type_list ',' type
    {
        $$ = ListAdd ($1, (LType)$3);
    }
    ;
    
type
    : literal_structure
    | HALF { $$ = FloatType.Half; }
    | FLOAT { $$ = FloatType.Float; }
    | DOUBLE { $$ = FloatType.Double; }
    | I8 { $$ = IntegerType.I8; }
    | I16 { $$ = IntegerType.I8; }
    | I32 { $$ = IntegerType.I8; }
    | I64 { $$ = IntegerType.I8; }
    | type '(' type_list ')'
    {
        $$ = new FunctionType ();
    }
    | type '*'
    {
        $$ = new PointerType ((LType)$1, 0);
    }
    | LOCAL_SYMBOL
    {
        $$ = new NamedType ((Symbol)$1);
    }
    ;
    
function_definition
    : DEFINE type GLOBAL_SYMBOL '(' parameter_list ')' function_addr attribute_group_refs '{' instructions '}'
    {
        var f = new FunctionDefinition ((GlobalSymbol)$3, (LType)$2, (List<Parameter>)$5, (List<Instruction>)$10);
    }
    ;
    
parameter_list
    : parameter
    | parameter_list parameter
    ;
    
parameter
    : type
    ;
    
function_addr
    : UNNAMED_ADDR
    | LOCAL_UNNAMED_ADDR
    ;
    
attribute_group_refs
    : attribute_group_ref
    | attribute_group_refs attribute_group_ref
    ;
    
attribute_group_ref
    : ATTRIBUTE_GROUP_REF
    ;
    
instructions
    : instruction
    | instructions instruction
    ;
    
instruction
    : terminal_instruction
    | assign_instruction
    ;
    
terminal_instruction
    : RET
    | BR I1 value ',' label_value ',' label_value
    | BR label_value
    ;
    
assign_instruction
    : LOCAL_SYMBOL '=' ICMP icmp_condition type value ',' value
    {
        $$ = new IcmpInstruction ((LocalSymbol)$1, (IcmpCondition)$4, (LType)$5, (Value)$6, (Value)$8);
    }
    ;
    
icmp_condition
    : EQ  { $$ = IcmpCondition.Equal; }
    | NE  { $$ = IcmpCondition.NotEqual; }
    | UGT { $$ = IcmpCondition.UnsignedGreaterThan; }
    | UGE { $$ = IcmpCondition.UnsignedGreaterThanOrEqual; }
    | ULT { $$ = IcmpCondition.UnsignedLessThan; }
    | ULE { $$ = IcmpCondition.UnsignedLessThanOrEqual; }
    | SGT { $$ = IcmpCondition.SignedGreaterThan; }
    | SGE { $$ = IcmpCondition.SignedGreaterThanOrEqual; }
    | SLT { $$ = IcmpCondition.SignedLessThan; }
    | SLE { $$ = IcmpCondition.SignedLessThanOrEqual; }
    ;
    
value
    : constant 
    | LOCAL_SYMBOL { $$ = new LocalValue ((LocalSymbol)$1); }
    ;

constant
    : NULL         { $$ = NullConstant.Null; }
    ;
    
label_value
    : LABEL LOCAL_SYMBOL
    {
        $$ = $2;
    }
    ;
            
%%

}

