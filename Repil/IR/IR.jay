%{
using System;
using System.Collections.Generic;
using System.IO;
using System.Numerics;
using System.Text;
using System.Linq;

using Repil.Types;

#pragma warning disable 219,414

namespace Repil.IR
{
	public partial class Parser
	{
%}

%token INTEGER FLOAT_LITERAL STRING TRUE FALSE UNDEF VOID NULL LABEL X
%token SOURCE_FILENAME TARGET DATALAYOUT TRIPLE
%token GLOBAL_SYMBOL LOCAL_SYMBOL META_SYMBOL DISTINCT
%token TYPE HALF FLOAT DOUBLE I1 I8 I16 I32 I64
%token DEFINE DECLARE UNNAMED_ADDR LOCAL_UNNAMED_ADDR
%token NONNULL NOCAPTURE WRITEONLY
%token ATTRIBUTE_GROUP_REF ATTRIBUTES NORECURSE NOUNWIND SSP UWTABLE ARGMEMONLY
%token RET BR SWITCH INDIRECTBR INVOKE RESUME CATCHSWITCH CATCHRET CLEANUPRET UNREACHABLE
%token FNEG
%token ADD NUW NSW FADD SUB FSUB MUL FMUL UDIV SDIV FDIV UREM SREM FREM
%token SHL LSHR EXACT ASHR
%token AND OR XOR
%token EXTRACTELEMENT INSERTELEMENT SHUFFLEVECTOR
%token EXTRACTVALUE INSERTVALUE
%token ALLOCA LOAD STORE FENCE CMPXCHG ATOMICRMW GETELEMENTPTR ALIGN INBOUNDS INRANGE
%token TRUNC ZEXT SEXT FPTRUNC FPEXT TO
%token FPTOUI FPTOSI UITOFP SITOFP PTRTOINT INTTOPTR BITCAST ADDRSPACECAST
%token ICMP EQ NE UGT UGE ULT ULE SGT SGE SLT SLE
%token FCMP OEQ OGT OGE OLT OLE ONE ORD UEQ UNE UNO
%token PHI SELECT CALL TAIL VA_ARG
%token LANDINGPAD CATCHPAD CLEANUPPAD

%start module
%%

module
	: module_parts
	;
	
module_parts
    : module_part
    | module_parts module_part
    ;
    
module_part
    : SOURCE_FILENAME '=' STRING
    {
        module.SourceFilename = (string)$3;
    }
    | TARGET DATALAYOUT '=' STRING
    {
        module.TargetDatalayout = (string)$4;
    }
    | TARGET TRIPLE '=' STRING
    {
        module.TargetTriple = (string)$4;
    }
    | LOCAL_SYMBOL '=' TYPE literal_structure
    {
        module.IdentifiedStructures[(Symbol)$1] = (StructureType)$4;
    }
    | function_definition
    {
        var f = (FunctionDefinition)$1;
        module.FunctionDefinitions[f.Symbol] = f;
    }
    | function_declaration
    {
        var f = (FunctionDeclaration)$1;
        module.FunctionDeclarations[f.Symbol] = f;
    }
    | ATTRIBUTES ATTRIBUTE_GROUP_REF '=' '{' attributes '}'
    | META_SYMBOL '=' '!' '{' metadata '}'
    | META_SYMBOL '=' DISTINCT '!' '{' metadata '}'
    ;
    
attributes
    : attribute
    | attributes attribute
    ;
    
attribute
    : NORECURSE
    | NOUNWIND
    | SSP
    | UWTABLE
    | ARGMEMONLY
    | STRING '=' STRING
    | STRING
    ;
    
metadata
    : metadatum
    | metadata ',' metadatum
    ;
    
metadatum
    : typed_value
    | META_SYMBOL
    ;
    
literal_structure
    : '{' type_list '}'
    {
        var s = new LiteralStructureType ((List<LType>)$2);
        $$ = s;
    }
    ;
    
type_list
    : type
    {
        $$ = NewList ((LType)$1);
    }
    | type_list ',' type
    {
        $$ = ListAdd ($1, (LType)$3);
    }
    ;
    
type
    : literal_structure
    | VOID   { $$ = VoidType.Void; }
    | HALF   { $$ = FloatType.Half; }
    | FLOAT  { $$ = FloatType.Float; }
    | DOUBLE { $$ = FloatType.Double; }
    | I1     { $$ = IntegerType.I1; }
    | I8     { $$ = IntegerType.I8; }
    | I16    { $$ = IntegerType.I16; }
    | I32    { $$ = IntegerType.I32; }
    | I64    { $$ = IntegerType.I64; }
    | type '(' type_list ')'
    {
        $$ = new FunctionType ((LType)$1, (List<LType>)$3);
    }
    | type '*'
    {
        $$ = new PointerType ((LType)$1, 0);
    }
    | LOCAL_SYMBOL
    {
        $$ = new NamedType ((Symbol)$1);
    }
    | '<' INTEGER X type '>'
    {
        $$ = new VectorType ((int)(BigInteger)$2, (LType)$4);
    }
    | '[' INTEGER X type ']'
    {
        $$ = new ArrayType ((long)(BigInteger)$2, (LType)$4);
    }
    ;
    
function_definition
    : DEFINE type GLOBAL_SYMBOL '(' parameter_list ')' function_addr attribute_group_refs '{' blocks '}'
    {
        $$ = new FunctionDefinition ((LType)$2, (GlobalSymbol)$3, (List<Parameter>)$5, (List<Block>)$10);
    }
    ;
    
function_declaration
    : DECLARE type GLOBAL_SYMBOL '(' parameter_list ')' attribute_group_refs
    {
        $$ = new FunctionDeclaration ((LType)$2, (GlobalSymbol)$3, (List<Parameter>)$5);
    }
    | DECLARE type GLOBAL_SYMBOL '(' parameter_list ')' function_addr attribute_group_refs
    {
        $$ = new FunctionDeclaration ((LType)$2, (GlobalSymbol)$3, (List<Parameter>)$5);
    }
    ;
    
parameter_list
    : parameter
    {
        $$ = NewList ((Parameter)$1);
    }
    | parameter_list ',' parameter
    {
        $$ = ListAdd ($1, (Parameter)$3);
    }
    ;
    
parameter
    : type
    {
        $$ = new Parameter (LocalSymbol.None, (LType)$1);
    }
    | type parameter_attributes
    {
        $$ = new Parameter (LocalSymbol.None, (LType)$1);
    }
    ;
    
parameter_attributes
    : parameter_attribute
    | parameter_attributes parameter_attribute
    {
        $$ = ((ParameterAttributes)$1) | ((ParameterAttributes)$2);
    }
    ;
    
parameter_attribute
    : NONNULL   { $$ = ParameterAttributes.NonNull; }
    | NOCAPTURE { $$ = ParameterAttributes.NoCapture; }
    | WRITEONLY { $$ = ParameterAttributes.WriteOnly; }
    ;
    
function_addr
    : UNNAMED_ADDR
    | LOCAL_UNNAMED_ADDR
    ;
    
attribute_group_refs
    : attribute_group_ref
    | attribute_group_refs attribute_group_ref
    ;
    
attribute_group_ref
    : ATTRIBUTE_GROUP_REF
    ;
    
icmp_condition
    : EQ  { $$ = IcmpCondition.Equal; }
    | NE  { $$ = IcmpCondition.NotEqual; }
    | UGT { $$ = IcmpCondition.UnsignedGreaterThan; }
    | UGE { $$ = IcmpCondition.UnsignedGreaterThanOrEqual; }
    | ULT { $$ = IcmpCondition.UnsignedLessThan; }
    | ULE { $$ = IcmpCondition.UnsignedLessThanOrEqual; }
    | SGT { $$ = IcmpCondition.SignedGreaterThan; }
    | SGE { $$ = IcmpCondition.SignedGreaterThanOrEqual; }
    | SLT { $$ = IcmpCondition.SignedLessThan; }
    | SLE { $$ = IcmpCondition.SignedLessThanOrEqual; }
    ;
    
fcmp_condition
    : TRUE   { $$ = FcmpCondition.True; }
    | FALSE  { $$ = FcmpCondition.False; }
    | ORD    { $$ = FcmpCondition.Ordered; }
    | OEQ    { $$ = FcmpCondition.OrderedEqual; }
    | ONE    { $$ = FcmpCondition.OrderedNotEqual; }
    | OGT    { $$ = FcmpCondition.OrderedGreaterThan; }
    | OGE    { $$ = FcmpCondition.OrderedGreaterThanOrEqual; }
    | OLT    { $$ = FcmpCondition.OrderedLessThan; }
    | OLE    { $$ = FcmpCondition.OrderedLessThanOrEqual; }
    | UNO    { $$ = FcmpCondition.Unordered; }
    | UEQ    { $$ = FcmpCondition.UnorderedEqual; }
    | UNE    { $$ = FcmpCondition.UnorderedNotEqual; }
    | UGT    { $$ = FcmpCondition.UnorderedGreaterThan; }
    | UGE    { $$ = FcmpCondition.UnorderedGreaterThanOrEqual; }
    | ULT    { $$ = FcmpCondition.UnorderedLessThan; }
    | ULE    { $$ = FcmpCondition.UnorderedLessThanOrEqual; }
    ;
    
value
    : constant 
    | LOCAL_SYMBOL  { $$ = new LocalValue ((LocalSymbol)$1); }
    | GLOBAL_SYMBOL { $$ = new GlobalValue ((GlobalSymbol)$1); }
    ;

constant
    : NULL            { $$ = NullConstant.Null; }
    | FLOAT_LITERAL   { $$ = new FloatConstant ((double)$1); }
    | INTEGER         { $$ = new IntegerConstant ((BigInteger)$1); }
    | TRUE            { $$ = BooleanConstant.True; }
    | FALSE           { $$ = BooleanConstant.False; }
    | UNDEF           { $$ = UndefinedConstant.Undefined; }
    | '<' typed_constants '>'
    {
        $$ = new VectorConstant ((List<TypedConstant>)$2);
    }
    ;
    
label_value
    : LABEL LOCAL_SYMBOL
    {
        $$ = new LabelValue ((LocalSymbol)$2);
    }
    ;
    
typed_value
    : type value
    {
        $$ = new TypedValue ((LType)$1, (Value)$2);
    }
    ;
            
typed_constant
    : type constant
    {
        $$ = new TypedConstant ((LType)$1, (Constant)$2);
    }
    ;
    
typed_constants
    : typed_constant
    {
        $$ = NewList ((TypedConstant)$1);
    }
    | typed_constants ',' typed_constant
    {
        $$ = ListAdd ($1, (TypedConstant)$3);
    }
    ;

metadata_kv
    : META_SYMBOL META_SYMBOL
    ;
    
metadata_kvs
    : metadata_kv
    | metadata_kvs ',' metadata_kv
    ;
    
element_index
    : typed_value
    ;
    
element_indices
    : element_index
    {
        $$ = NewList ((TypedValue)$1);
    }
    | element_indices ',' element_index
    {
        $$ = ListAdd ($1, (TypedValue)$3);
    }
    ;
    
blocks
    : block
    {
        $$ = NewList ((Block)$1);
    }
    | blocks block
    {
        $$ = ListAdd ($1, (Block)$2);
    }
    ;

block
    : assignments terminator_instruction
    {
        $$ = new Block (LocalSymbol.None, (List<Assignment>)$1, (TerminatorInstruction)$2);
    }
    | terminator_instruction
    {
        $$ = new Block (LocalSymbol.None, Enumerable.Empty<Assignment>(), (TerminatorInstruction)$1);
    }
    ;
    
assignments
    : assignment
    {
        $$ = NewList ((Assignment)$1);
    }
    | assignments assignment
    {
        $$ = ListAdd ($1, (Assignment)$2);
    }
    ;
    
assignment
    : instruction
    {
        $$ = new Assignment ((Instruction)$1);
    }
    | LOCAL_SYMBOL '=' instruction
    {
        $$ = new Assignment ((LocalSymbol)$1, (Instruction)$3);
    }
    ;
    
function_pointer
    : value
    ;
    
function_args
    : function_arg
    {
        $$ = NewList ((Argument)$1);
    }
    | function_args ',' function_arg
    {
        $$ = ListAdd ($1, (Argument)$3);
    }
    ;
    
function_arg
    : type value
    {
        $$ = new Argument ((LType)$1, (Value)$2, (ParameterAttributes)0);
    }
    | type parameter_attributes value
    {
        $$ = new Argument ((LType)$1, (Value)$3, ParameterAttributes.NonNull);
    }
    ;
    
phi_vals
    : phi_val
    {
        $$ = NewList ((PhiValue)$1);
    }
    | phi_vals ',' phi_val
    {
        $$ = ListAdd ($1, (PhiValue)$3);
    };
    
phi_val
    : '[' value ',' value ']'
    {
        $$ = new PhiValue ((Value)$2, (Value)$4);
    }
    ;
    
switch_cases
    : switch_case
    {
        $$ = NewList ((SwitchCase)$1);
    }
    | switch_cases switch_case
    {
        $$ = ListAdd ($1, (SwitchCase)$2);
    }
    ;
    
switch_case
    : typed_constant ',' label_value
    {
        $$ = new SwitchCase ((TypedConstant)$1, (LabelValue)$3);
    }
    ;
    
wrappings
    : wrapping
    | wrappings wrapping
    ;
    
wrapping
    : NUW
    | NSW
    ;
    
terminator_instruction
    : BR label_value
    {
        $$ = new UnconditionalBrInstruction ((LabelValue)$2);
    }
    | BR I1 value ',' label_value ',' label_value
    {
        $$ = new ConditionalBrInstruction ((Value)$3, (LabelValue)$5, (LabelValue)$7);
    }
    | BR I1 value ',' label_value ',' label_value ',' META_SYMBOL META_SYMBOL
    {
        $$ = new ConditionalBrInstruction ((Value)$3, (LabelValue)$5, (LabelValue)$7);
    }
    | RET typed_value
    {
        $$ = new RetInstruction ((TypedValue)$2);
    }
    | SWITCH typed_value ',' label_value '[' switch_cases ']'
    {
        $$ = new SwitchInstruction ((TypedValue)$2, (LabelValue)$4, (List<SwitchCase>)$6);
    }
    ;
    
instruction
    : ADD type value ',' value
    {
        $$ = new AddInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | ADD wrappings type value ',' value
    {
        $$ = new AddInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | ALLOCA type ',' ALIGN INTEGER
    {
        $$ = new AllocaInstruction ((LType)$2, (int)(BigInteger)$5);
    }
    | AND type value ',' value
    {
        $$ = new AndInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | BITCAST typed_value TO type
    {
        $$ = new BitcastInstruction ((TypedValue)$2, (LType)$4);
    }
    | CALL type function_pointer '(' function_args ')'
    {
        $$ = new CallInstruction ((LType)$2, (Value)$3, (List<Argument>)$5, false);
    }
    | CALL type function_pointer '(' function_args ')' attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$2, (Value)$3, (List<Argument>)$5, false);
    }
    | TAIL CALL type function_pointer '(' function_args ')' attribute_group_refs
    {
        $$ = new CallInstruction ((LType)$3, (Value)$4, (List<Argument>)$6, true);
    }
    | EXTRACTELEMENT typed_value ',' typed_value
    {
        $$ = new ExtractElementInstruction ((TypedValue)$2, (TypedValue)$4);
    }
    | FADD type value ',' value
    {
        $$ = new FloatAddInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | FCMP fcmp_condition type value ',' value
    {
        $$ = new FcmpInstruction ((FcmpCondition)$2, (LType)$3, (Value)$4, (Value)$6);
    }
    | FMUL type value ',' value
    {
        $$ = new FloatMultiplyInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | FPTOUI typed_value TO type
    {
        $$ = new FptouiInstruction ((TypedValue)$2, (LType)$4);
    }
    | FPTOSI typed_value TO type
    {
        $$ = new FptosiInstruction ((TypedValue)$2, (LType)$4);
    }
    | GETELEMENTPTR type ',' typed_value ',' element_indices
    {
        $$ = new GetElementPointerInstruction ((LType)$2, (TypedValue)$4, (List<TypedValue>)$6);
    }
    | GETELEMENTPTR INBOUNDS type ',' typed_value ',' element_indices
    {
        $$ = new GetElementPointerInstruction ((LType)$3, (TypedValue)$5, (List<TypedValue>)$7);
    }
    | ICMP icmp_condition type value ',' value
    {
        $$ = new IcmpInstruction ((IcmpCondition)$2, (LType)$3, (Value)$4, (Value)$6);
    }
    | INSERTELEMENT typed_value ',' typed_value ',' typed_value
    {
        $$ = new InsertElementInstruction ((TypedValue)$2, (TypedValue)$4, (TypedValue)$6);
    }
    | LOAD type ',' typed_value ',' ALIGN INTEGER ',' metadata_kvs
    {
        $$ = new LoadInstruction ((LType)$2, (TypedValue)$4);
    }
    | LSHR type value ',' value
    {
        $$ = new LshrInstruction ((LType)$2, (Value)$3, (Value)$5, false);
    }
    | LSHR EXACT type value ',' value
    {
        $$ = new LshrInstruction ((LType)$3, (Value)$4, (Value)$6, true);
    }
    | OR type value ',' value
    {
        $$ = new OrInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | MUL wrappings type value ',' value
    {
        $$ = new MultiplyInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | PHI type phi_vals
    {
        $$ = new PhiInstruction ((LType)$2, (List<PhiValue>)$3);
    }
    | SDIV type value ',' value
    {
        $$ = new SdivInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | SELECT type value ',' typed_value ',' typed_value
    {
        $$ = new SelectInstruction ((LType)$2, (Value)$3, (TypedValue)$5, (TypedValue)$7);
    }
    | SEXT typed_value TO type
    {
        $$ = new SextInstruction ((TypedValue)$2, (LType)$4);
    }
    | SHL type value ',' value
    {
        $$ = new ShlInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | SHL wrappings type value ',' value
    {
        $$ = new ShlInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | SHUFFLEVECTOR typed_value ',' typed_value ',' typed_value
    {
        $$ = new ShuffleVectorInstruction ((TypedValue)$2, (TypedValue)$4, (TypedValue)$6);
    }
    | SITOFP typed_value TO type
    {
        $$ = new SitofpInstruction ((TypedValue)$2, (LType)$4);
    }
    | STORE typed_value ',' typed_value ',' ALIGN INTEGER ',' metadata_kvs
    {
        $$ = new StoreInstruction ((TypedValue)$2, (TypedValue)$4);
    }
    | SUB type value ',' value
    {
        $$ = new SubInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | SUB wrappings type value ',' value
    {
        $$ = new SubInstruction ((LType)$3, (Value)$4, (Value)$6);
    }
    | TRUNC typed_value TO type
    {
        $$ = new TruncInstruction ((TypedValue)$2, (LType)$4);
    }
    | UITOFP typed_value TO type
    {
        $$ = new UitofpInstruction ((TypedValue)$2, (LType)$4);
    }
    | XOR type value ',' value
    {
        $$ = new XorInstruction ((LType)$2, (Value)$3, (Value)$5);
    }
    | ZEXT typed_value TO type
    {
        $$ = new ZextInstruction ((TypedValue)$2, (LType)$4);
    }
    ;
    
%%

}

